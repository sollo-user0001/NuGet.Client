steps:
- task: PowerShell@1
  displayName: "Download Config Files"
  enabled: "false"
  inputs:
    scriptType: "inlineScript"
    inlineScript: |
      $url = $(VstsConfigFileRootUrl) -f 'NuGet.Core.FuncTests.Config'
      Invoke-RestMethod -Method Get -Uri $url -UseDefaultCredentials -OutFile $(Build.Repository.LocalPath)\\NuGet.Core.FuncTests.Config
      $url = $(VstsConfigFileRootUrl) -f 'NuGet.Protocol.FuncTest.Config'
      Invoke-RestMethod -Method Get -Uri $url -UseDefaultCredentials -OutFile $(Build.Repository.LocalPath)\\NuGet.Protocol.FuncTest.Config

- task: NuGetCommand@2
  displayName: 'Add the Microbuildtoolset package source'
  inputs:
    command: 'custom'
    arguments: 'sources add -Name MicrobuildtoolsetSource -Source https://devdiv.pkgs.visualstudio.com/_packaging/microbuildtoolset/nuget/v3/index.json -UserName $(VsPackageFeedUsername) -Password $(VsPackageFeedPassword)'

- task: ShellScript@2
  displayName: "Run Tests (continue on error)"
  continueOnError: "true"
  inputs:
    scriptPath: "scripts/funcTests/runFuncTests.sh"
    disableAutoCwd: "true"
    cwd: "$(Build.Repository.LocalPath)"
  condition: "and(succeeded(), eq(variables['IsOfficialBuild'], 'true'))"

- task: ShellScript@2
  displayName: "Run Tests (stop on error)"
  continueOnError: "false"
  inputs:
    scriptPath: "scripts/funcTests/runFuncTests.sh"
    disableAutoCwd: "true"
    cwd: "$(Build.Repository.LocalPath)"
  condition: "and(succeeded(), not(eq(variables['IsOfficialBuild'], 'true')))"

- task: PublishTestResults@2
  displayName: "Publish Test Results"
  inputs:
    testRunner: "XUnit"
    testResultsFiles: "*.xml"
    testRunTitle: "NuGet.Client Tests On Linux"
    searchFolder: "$(Build.Repository.LocalPath)/build/TestResults"
    mergeTestResults: "true"
  condition: "succeededOrFailed()"

- task: PublishBuildArtifacts@1
  displayName: "Publish Test Freeze Dump"
  inputs:
    PathtoPublish: "$(Build.Repository.LocalPath)/build/TestResults"
    ArtifactName: "$(Agent.JobName)"
    ArtifactType: "Container"
  condition: "or(failed(), canceled())"

- task: PowerShell@2
  displayName: "Initialize Git Commit Status on GitHub"
  inputs:
    targetType: "inline"
    script: |
      . $(Build.Repository.LocalPath)/scripts/utils/PostGitCommitStatus.ps1
      SetCommitStatusForTestResult -PersonalAccessToken $(NuGetLurkerPersonalAccessToken) -VstsPersonalAccessToken $(System.AccessToken) -CommitSha $(Build.SourceVersion) -TestName "Tests On Linux"
    failOnStderr: "true"
  condition: "not(eq(variables['ManualGitHubChecks'], 'false'))"
